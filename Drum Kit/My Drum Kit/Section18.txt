Adding Event Listeners to a Button
    addEventListener()
        target.addEventListener(type, listener[. options])
            type: case-sensitive
            listener: javascript function - no parenthesis
                with parenthesis - function called without the event

    anonymous funtion: function w/o a name
        listener: function ()

Higher Order Functions and Passing Functions as Arguments
    function add(num1, num2) {
        return num1 + num2;
    }

    function substract(num1, num2) {
        return num1 - num2;
    }
    function multiply(num1, num2) {
        return num1 * num2;
    }

    function divide(num1, num2) {
        return num1 / num2;
    }
    function calculator(num1, num2, operator) {
        return operator(num1, num2);
    }

    calculator(4, 5, add);
    calculator(4, 5, multiply);

    ** DEBUGGER
    calculator(3, 4, multiply); | ENTER -> Debug mode

    High order functions: functions that can take other functions as inputs
        not universal

How to Play Sounds on a Website
    this: identity of the current button
    this.style.color = "white"; | change into white
    
How to Use Switch Statements
    take the code down a different track depending on the value of a variable

A Deeper Understanding of Javascript Objects
&& Objects, their Methods, and the Dot Notation

    Javascript object:
    var bellBoy1 = {
        name: "Timmy",
        age: 19,
        hasWorkPermit: true,
        languages: ["French", "English"]
    }
    bellBoy1.name | name

    var houseKeeper1 = {
        name: "Jane",
        age: 25,
        hasWorkPermit: true,
        yearOfExperience: 12,
        cleaningRepertoire: ["bathroom", "lobby", "bedroom"]
    }

    console.log(houseKeeper1.name);

    CONSTRUCTOR FUNCTION: (class)
    function BellBoy (name, age, hasWorkPermit, languages) {
        this.name = name;
        this.age = age;
        this.hasWorkPermit = hasWorkPermit;
        this.languages = languages;
        this.moveSuitcase = function() {
            alert("May I take your suitcase?");
            pickUpSuitcase();
            move();
        }
    }

    Initialize Object
    var bellBoy1 = new BellBoy("Timmy", 19, true, ["French", "English"])
    bellBoy1.moveSuitcase();

    function HouseKeeper (yearOfExperience, name, cleaningRepertoire) {
        this.yearOfExperience = yearOfExperience;
        this.name = name;
        this.cleaningRepertoire = cleaningRepertoire;
        this.clean = function() {
            alert("Cleaning in progress..");
        }
    }
    var houseKeeper1 = new HouseKeeper(12, "Jane", ["bathroom", "lobby", "bedroom"])
    houseKeeper1.clean();

Using Keyboard Event Listeners to Check for Key Presses
    "keydown" event listener instead of "keypress"

Understanding Callbacks and How to Respond to addEventListener
    document.addEventListener("keydown", respondToKey(event));
    function respondToKey(event) {
        console.log("Key pressed.");
    }

    Higher Order Function: addEventListener, 
        
    Callback Function: respondToKey
        > only happens when the function is called/satisfy the requirement

    function sayHi(name) {
        console.log("Hello, " + name);
    }

    function anotherAddEventListener(typeOfEvent, callback) {
        var eventThatHappened = {
            eventType: "keydown",
            key: "p",
            durationOfKeydown: 2
        }

        if (eventThatHappened.event === typeOfEvent) {
            callback(eventThatHappened);
        }
    }

    anotherAddEventListener("keydown", function(event){
        console.log(event);
    })

Adding Animation to Websites


Application Programming Interfaces (APIs)

Introduciton to APIs
    REST APIs: follows set of rules: HTTP Protocol
        GET POST PUT PATCH DELETE
    Use POSTMAN

Structuring API Requests
    Private API
    Public API

    http://bored-api.appbrewery.com

    API Endpoints: BaseURL/Endpoint
        /random
        /filter
    
    Query Parameters: searching
        BaseURL/endpoint?query=value&query2=value

    Path Parameters: identify your resource
        BaseURL/endpoint/{path-parameter}
            id
            username

What is JSON?
    flat-packed
    jsonviewer.stack.hu
    JS object -> JSON: serialization
    const jsonData = JSON.stringify(data) | pack a JSON
    const data = JSON.parse(jsonData)     | unpack JSON

Making Server-side API Requests with Axios
    import axios from "axios";
    app.get("/".async(req, res) => {
        try {
            const response = await axios.get([URL]);
            res.render("index.ejs", {activity: response.data }); | response.data - JSON.parse() automatically
        } catch (error) {
            console.error([message], error.message);
            res.status(500).send([message]);
        }
    })

API Authentication
    0. No Authentication
        rate limit
    1. Basic Authentication
        username
        password
        Base64 Encoding
        username:password
        register: body, x-www-form-encoded
        janicenguyen03
        duyennguyen
    2. API Key Authorization
        Authentication: user, authenticate themselves with your service (log in, register)
            allows you to be identified as a user to the API provider
        Authorization: client, user ur service with an API key to user the API
            allows you to use an API
        apiKey: aa9ce665-56c6-4549-84af-90430302f461
    3. Token Based Authentication
        username,  password -> token -> interact with the API
        OAuth 2.0
        interact with the service as if you were the user
        token: 23c348b3-637b-4601-8d82-778a28660c89

REST APIs
    GET
        try {
            await axios.get("URL", config); | config: headers, params, auth, etc
            res.sendStatus(201);
        } catch (error) {
            res.status(404).send(error.response.data);
        }
    POST
        try {
            await axios.post("URL", body, config); | body: data (username, password)
            res.sendStatus(201);
        } catch (error) {
            res.status(404).send(error.response.data);
        }
    PUT | replace every data
        try {
            await axios.put("URL", body, config);
            res.sendStatus(201);
        } catch (error) {
            res.status(404).send(error.response.data);
        }
    PATCH | update one piece of data
        try {
            await axios.patch("URL", body, config);
            res.sendStatus(200);
        } catch (error) {
            res.status(404).send(error.response.data);
        }
    DELETE
        try {
            await axios.delete("URL", config);
            res.sendStatus(200);
        } catch (error) {
            res.status(404).send(error.response.data);
        }

Secrets Project